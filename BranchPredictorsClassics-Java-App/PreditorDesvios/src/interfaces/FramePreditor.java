package interfaces;

import Entidades.PreditorCorrelacao;
import Entidades.PreditorDoisBits;
import Entidades.PreditorFrenteTras;
import Entidades.PreditorNotTaken;
import Entidades.PreditorTaken;
import Entidades.PreditorTorneio;
import Entidades.PreditorTorneioPersonalizado;
import java.awt.CardLayout;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.concurrent.Task;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JProgressBar;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author dougl
 */
public class FramePreditor extends javax.swing.JFrame {

    private String enderecoArquivo;
    private JProgressBar progressBar;
    private Task task;

    /**
     * Creates new form FramePreditor
     */
    public FramePreditor() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        seletorArquivos = new javax.swing.JFileChooser();
        panelInicial = new javax.swing.JPanel();
        panelMain = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        saidaTexto = new javax.swing.JTextArea();
        executarPreditor = new javax.swing.JButton();
        resultados = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        saidaTaken = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        saidaNotTaken = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        saidaFrenteTras = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        saidaDoisBitsLocal = new javax.swing.JTextArea();
        jScrollPane7 = new javax.swing.JScrollPane();
        saidaDoisBitsGlobal = new javax.swing.JTextArea();
        jScrollPane8 = new javax.swing.JScrollPane();
        saidaCorrelacao = new javax.swing.JTextArea();
        jScrollPane9 = new javax.swing.JScrollPane();
        saidaTorneio = new javax.swing.JTextArea();
        jScrollPane10 = new javax.swing.JScrollPane();
        saidaPersonalizado = new javax.swing.JTextArea();
        barraProgresso = new javax.swing.JProgressBar();
        jMenuBar2 = new javax.swing.JMenuBar();
        arquivo = new javax.swing.JMenu();
        abrirArquivo = new javax.swing.JMenuItem();

        seletorArquivos.setDialogTitle("Selecione o arquivo de entrada");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Preditor de Desvios");

        panelInicial.setLayout(new java.awt.CardLayout());

        saidaTexto.setColumns(20);
        saidaTexto.setRows(5);
        saidaTexto.setEnabled(false);
        jScrollPane1.setViewportView(saidaTexto);

        executarPreditor.setText("Executar");
        executarPreditor.setEnabled(false);
        executarPreditor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executarPreditorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelMainLayout = new javax.swing.GroupLayout(panelMain);
        panelMain.setLayout(panelMainLayout);
        panelMainLayout.setHorizontalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelMainLayout.createSequentialGroup()
                .addContainerGap(161, Short.MAX_VALUE)
                .addComponent(executarPreditor, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(135, 135, 135))
            .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelMainLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 617, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        panelMainLayout.setVerticalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelMainLayout.createSequentialGroup()
                .addContainerGap(324, Short.MAX_VALUE)
                .addComponent(executarPreditor)
                .addContainerGap())
            .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelMainLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(76, Short.MAX_VALUE)))
        );

        panelInicial.add(panelMain, "panelMain");

        saidaTaken.setEditable(false);
        saidaTaken.setColumns(20);
        saidaTaken.setRows(5);
        jScrollPane2.setViewportView(saidaTaken);

        resultados.addTab("Taken", jScrollPane2);

        saidaNotTaken.setEditable(false);
        saidaNotTaken.setColumns(20);
        saidaNotTaken.setRows(5);
        jScrollPane4.setViewportView(saidaNotTaken);

        resultados.addTab("Not-Taken", jScrollPane4);

        saidaFrenteTras.setEditable(false);
        saidaFrenteTras.setColumns(20);
        saidaFrenteTras.setRows(5);
        jScrollPane5.setViewportView(saidaFrenteTras);

        resultados.addTab("Frente-tras", jScrollPane5);

        saidaDoisBitsLocal.setEditable(false);
        saidaDoisBitsLocal.setColumns(20);
        saidaDoisBitsLocal.setRows(5);
        jScrollPane6.setViewportView(saidaDoisBitsLocal);

        resultados.addTab("2-bits(local)", jScrollPane6);

        saidaDoisBitsGlobal.setEditable(false);
        saidaDoisBitsGlobal.setColumns(20);
        saidaDoisBitsGlobal.setRows(5);
        jScrollPane7.setViewportView(saidaDoisBitsGlobal);

        resultados.addTab("2-bits(global)", jScrollPane7);

        saidaCorrelacao.setColumns(20);
        saidaCorrelacao.setRows(5);
        jScrollPane8.setViewportView(saidaCorrelacao);

        resultados.addTab("Correlação", jScrollPane8);

        saidaTorneio.setColumns(20);
        saidaTorneio.setRows(5);
        jScrollPane9.setViewportView(saidaTorneio);

        resultados.addTab("Torneio", jScrollPane9);

        saidaPersonalizado.setColumns(20);
        saidaPersonalizado.setRows(5);
        jScrollPane10.setViewportView(saidaPersonalizado);

        resultados.addTab("Personalizado", jScrollPane10);

        panelInicial.add(resultados, "resultados");

        barraProgresso.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        barraProgresso.setStringPainted(true);
        panelInicial.add(barraProgresso, "card4");

        arquivo.setText("Arquivo");

        abrirArquivo.setText("Selecionar");
        abrirArquivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirArquivoActionPerformed(evt);
            }
        });
        arquivo.add(abrirArquivo);

        jMenuBar2.add(arquivo);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void abrirArquivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirArquivoActionPerformed
        int returnVal = seletorArquivos.showOpenDialog(this);
        if (returnVal != JFileChooser.APPROVE_OPTION) {
            return;
        }
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            saidaDoisBitsGlobal.setText("");
            saidaDoisBitsLocal.setText("");
            saidaFrenteTras.setText("");
            saidaNotTaken.setText("");
            saidaTaken.setText("");
            saidaTexto.setText("");
            saidaCorrelacao.setText("");
            saidaTorneio.setText("");
            saidaPersonalizado.setText("");
            File file = seletorArquivos.getSelectedFile();
            try {
                // What to do with the file, e.g. display it in a TextArea
                FileReader arquivoSelecionado = new FileReader(file.getAbsolutePath());
                this.enderecoArquivo = file.getAbsolutePath();
                executarPreditor.setEnabled(false);
                /**/
                BufferedReader lerArquivo = new BufferedReader(arquivoSelecionado);

                //saidaTexto.read(arquivoSelecionado, null);

                //saidaTexto.
/*
                BufferedReader lerArquivo = new BufferedReader(arquivo);
                String linha = lerArquivo.readLine();
                while (linha != null) {
                    System.out.printf("%s\n", linha);

                    linha = lerArquivo.readLine(); // lê da segunda até a última linha
                    //String[] dadosLeitura = linha.split(":");
                    StringTokenizer dadosLeitura = new StringTokenizer(linha, ":");
                    Long enderecoDesvio= Long.parseLong(dadosLeitura.nextToken());
                    boolean tomado = dadosLeitura.nextToken()=="0"?false:true;
                    Long enderecoDestino= Long.parseLong(dadosLeitura.nextToken());
                    
                    
                    

                }
                arquivo.close();*/
                arquivoSelecionado.close();
                executarPreditor.setEnabled(true);
                setCursor(null);
            } catch (IOException ex) {
                System.out.println("Erro ao abrir arquivo file" + file.getAbsolutePath());
            } finally {
                CardLayout card = (CardLayout) panelInicial.getLayout();
                card.show(panelInicial, "panelMain");
            }
        } else {
            executarPreditor.setEnabled(false);
            System.out.println("Cacelado pelo usuario");
        }


    }//GEN-LAST:event_abrirArquivoActionPerformed

    private void executarPreditorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executarPreditorActionPerformed

        try {

            FileReader arquivo = new FileReader(this.enderecoArquivo);
            BufferedReader lerArquivo = new BufferedReader(arquivo);
            String linha = lerArquivo.readLine();

            PreditorTaken preditorTaken = new PreditorTaken();
            PreditorNotTaken preditorNotTaken = new PreditorNotTaken();
            PreditorDoisBits preditorDoisBitsLocal = new PreditorDoisBits();
            PreditorDoisBits preditorDoisBitsGlobal = new PreditorDoisBits();
            PreditorFrenteTras preditorFrenteTras = new PreditorFrenteTras();
            PreditorTorneio preditorTorneio = new PreditorTorneio();
            PreditorTorneioPersonalizado preditorTorneioPersonalizado = new PreditorTorneioPersonalizado();

            PreditorCorrelacao preditorCorrelacao = new PreditorCorrelacao();

            boolean predicaoAnterior = false;
            boolean predicaoAnteriorAnterior = false;
            Integer quantidadePreditorCorrelacao = 0;

            while (linha != null) {
                //  System.out.printf("%s\n", linha);

                //String[] dadosLeitura = linha.split(":");
                StringTokenizer dadosLeitura = new StringTokenizer(linha, ":");
                Long enderecoDesvio = Long.parseLong(dadosLeitura.nextToken());
                boolean tomado = (dadosLeitura.nextToken().equals("0")) ? false : true;
                Long enderecoDestino = Long.parseLong(dadosLeitura.nextToken());
                String nomeDesvio = dadosLeitura.nextToken();

                preditorTaken.analiseGlobal(enderecoDesvio, tomado, enderecoDestino, nomeDesvio);
                preditorNotTaken.analiseGlobal(enderecoDesvio, tomado, enderecoDestino, nomeDesvio);
                preditorDoisBitsLocal.analiseLocal(enderecoDesvio, tomado, enderecoDestino, nomeDesvio);
                preditorDoisBitsGlobal.analiseGlobal(enderecoDesvio, tomado, enderecoDestino, nomeDesvio);
                preditorFrenteTras.analiseLocal(enderecoDesvio, tomado, enderecoDestino, nomeDesvio);
                preditorTorneio.analise(enderecoDesvio, tomado, enderecoDestino, predicaoAnterior, predicaoAnteriorAnterior, nomeDesvio);

                preditorTorneioPersonalizado.analise(enderecoDesvio, tomado, enderecoDestino, predicaoAnterior, predicaoAnteriorAnterior, nomeDesvio);

                if (quantidadePreditorCorrelacao == 0) {
                    preditorCorrelacao.analiseLocal(enderecoDesvio, tomado, enderecoDestino, false, false, nomeDesvio);
                    predicaoAnterior = tomado;
                } else {
                    preditorCorrelacao.analiseLocal(enderecoDesvio, tomado, enderecoDestino, predicaoAnterior, predicaoAnteriorAnterior, nomeDesvio);
                    predicaoAnteriorAnterior = predicaoAnterior;
                    predicaoAnterior = tomado;

                }
                quantidadePreditorCorrelacao++;

                linha = lerArquivo.readLine(); // lê da segunda até a última linha

            }
            arquivo.close();
            StringBuilder texto = new StringBuilder();
            texto.append(preditorTaken.exibeNumeroBitsInterfaceGlobal());
            texto.append("\nStalls Preditor Global Taken: " + preditorTaken.calculaStalls());
            texto.append("\n");
            texto.append(preditorTaken.calculaTaxaAcerto());
            texto.append("\n\n");
            // texto.append("Taxa de Acerto em relação ao tipo de instrução\n");
            texto.append(preditorTaken.exibeTaxaAcertoPorTipoInterface());
            texto.append("\n");

            saidaTaken.append(texto.toString());
            texto = new StringBuilder();

            texto.append(preditorNotTaken.exibeNumeroBitsInterfaceGlobal());
            texto.append("\nStalls Preditor Global Not-Taken: " + preditorNotTaken.calculaStalls());
            texto.append("\n");
            texto.append(preditorNotTaken.calculaTaxaAcerto());
            texto.append("\n\n");
            //  texto.append("Taxa de Acerto em relação ao tipo de intrução\n");
            texto.append(preditorNotTaken.exibeTaxaAcertoPorTipoInterface());
            texto.append("\n");

            saidaNotTaken.append(texto.toString());

            texto = new StringBuilder();

            texto.append(preditorDoisBitsLocal.exibeNumeroBitsInterfaceLocal());
            texto.append("\nStalls Preditor Local 2-bits: " + preditorDoisBitsLocal.calculaStalls());
            texto.append("\n");
            texto.append(preditorDoisBitsLocal.calculaTaxaAcerto());
            texto.append("\n\n");
            //  texto.append("Taxa de Acerto em relação ao tipo de intrução\n");
            texto.append(preditorDoisBitsLocal.exibeTaxaAcertoPorTipoInterface());
            texto.append("\n");

            saidaDoisBitsLocal.append(texto.toString());

            texto = new StringBuilder();
            texto.append(preditorDoisBitsGlobal.exibeNumeroBitsInterfaceGlobal());
            texto.append("\nStalls Preditor Global 2-bits: " + preditorDoisBitsGlobal.calculaStalls());
            texto.append("\n");
            texto.append(preditorDoisBitsGlobal.calculaTaxaAcerto());
            texto.append("\n\n");
            //  texto.append("Taxa de Acerto em relação ao tipo de intrução\n");
            texto.append(preditorDoisBitsGlobal.exibeTaxaAcertoPorTipoInterface());
            texto.append("\n");

            saidaDoisBitsGlobal.append(texto.toString());

            texto = new StringBuilder();

            texto.append(preditorFrenteTras.exibeNumeroBitsInterface());
            texto.append("\nStalls Preditor Frente-Tras(local): " + preditorFrenteTras.calculaStalls());
            texto.append("\n");
            texto.append(preditorFrenteTras.calculaTaxaAcerto());
            texto.append("\n\n");
            //  texto.append("Taxa de Acerto em relação ao tipo de intrução\n");
            texto.append(preditorFrenteTras.exibeTaxaAcertoPorTipoInterface());
            texto.append("\n");

            saidaFrenteTras.append(texto.toString());

            texto = new StringBuilder();

            texto.append(preditorCorrelacao.exibeNumeroBitsInterface());
            texto.append("\nStalls Preditor Correlação: " + preditorCorrelacao.calculaStalls());
            texto.append("\n");
            texto.append(preditorCorrelacao.calculaTaxaAcerto());
            texto.append("\n\n");
            //  texto.append("Taxa de Acerto em relação ao tipo de intrução\n");
            texto.append(preditorCorrelacao.exibeTaxaAcertoPorTipoInterface());
            texto.append("\n");
            saidaCorrelacao.append(texto.toString());

            texto = new StringBuilder();

            texto.append(preditorTorneio.exibeNumeroBitsInterface());
            texto.append("\nStalls Preditor Torneio: " + preditorTorneio.calculaStalls());
            texto.append("\n");
            texto.append(preditorTorneio.calculaTaxaAcerto());
            texto.append("\n\n");
            //  texto.append("Taxa de Acerto em relação ao tipo de intrução\n");
            texto.append(preditorTorneio.exibeTaxaAcertoPorTipoInterface());
            texto.append("\n");
            saidaTorneio.append(texto.toString());

            texto = new StringBuilder();

            texto.append(preditorTorneioPersonalizado.exibeNumeroBitsInterface());
            texto.append("\nStalls Preditor Torneio(2 bits global, correlação local): " + preditorTorneioPersonalizado.calculaStalls());
            texto.append("\n");
            texto.append(preditorTorneioPersonalizado.calculaTaxaAcerto());
            texto.append("\n\n");
            //  texto.append("Taxa de Acerto em relação ao tipo de intrução\n");
            texto.append(preditorTorneioPersonalizado.exibeTaxaAcertoPorTipoInterface());
            texto.append("\n");
            saidaPersonalizado.append(texto.toString());

        } catch (FileNotFoundException ex) {
            Logger.getLogger(FramePreditor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FramePreditor.class.getName()).log(Level.SEVERE, null, ex);
        }

        CardLayout card = (CardLayout) panelInicial.getLayout();
        card.show(panelInicial, "resultados");
    }//GEN-LAST:event_executarPreditorActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FramePreditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FramePreditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FramePreditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FramePreditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FramePreditor().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem abrirArquivo;
    private javax.swing.JMenu arquivo;
    private javax.swing.JProgressBar barraProgresso;
    private javax.swing.JButton executarPreditor;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JPanel panelInicial;
    private javax.swing.JPanel panelMain;
    private javax.swing.JTabbedPane resultados;
    private javax.swing.JTextArea saidaCorrelacao;
    private javax.swing.JTextArea saidaDoisBitsGlobal;
    private javax.swing.JTextArea saidaDoisBitsLocal;
    private javax.swing.JTextArea saidaFrenteTras;
    private javax.swing.JTextArea saidaNotTaken;
    private javax.swing.JTextArea saidaPersonalizado;
    private javax.swing.JTextArea saidaTaken;
    private javax.swing.JTextArea saidaTexto;
    private javax.swing.JTextArea saidaTorneio;
    private javax.swing.JFileChooser seletorArquivos;
    // End of variables declaration//GEN-END:variables
}


